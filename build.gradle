apply plugin: 'java-library'
apply plugin: 'eclipse'

project.group = 'org.obrel'
sourceCompatibility = 1.8

repositories
{
	mavenLocal()
    jcenter()
}

// substitute local project dependencies if available
configurations.all {
    resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
        if (dependency.requested instanceof ModuleComponentSelector && 
            ["org.obrel" ,"de.esoco"].contains(dependency.requested.group)) {
            def targetProject = findProject(":${dependency.requested.module}")
            if (targetProject != null) {
                dependency.useTarget (targetProject, "prefer local project")
                if (name.startsWith("compile")) // only log once
                    println "$project.name using local $targetProject as dependency"
            }
        }
    }
}

dependencies
{
	api 'de.esoco:esoco-monads:1.0.+'
	
	testImplementation platform('org.junit:junit-bom:5.5.2')	
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'junit:junit:4.12'
	
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine' // JUnit4 support
}

test {
	useJUnitPlatform()
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    failOnError = false
    options.addBooleanOption('quiet', true)
    
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:none', true) 
    }
}

buildscript {
	repositories { jcenter() }
	dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+' }
}
apply from: 'publish.gradle'